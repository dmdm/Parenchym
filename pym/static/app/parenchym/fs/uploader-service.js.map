{"version":3,"sources":["parenchym/fs/uploader-service.js"],"names":[],"mappings":"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","file":"parenchym/fs/uploader-service.js","sourcesContent":["angular.module('pym.fs').factory('pymFsUploaderService',\n        ['$log', '$upload', '$http', 'RC', 'pymService', 'FILE_STATES', 'FILE_STATE_CAPTIONS',\nfunction ($log,   $upload,   $http,   RC,   pym,          FILE_STATES,   FILE_STATE_CAPTIONS) {\n\n    \"use strict\";\n\n\n    function PymFile(file) {\n        this.file = file;\n        this.state = 0;\n        this.stateCaption = null;\n        this.key = null;\n        this.progress = 0;\n        this.validationPromise = null;\n        this.validationMessage = null;\n        this.uploadPromise = null;\n        this.isActive = false;\n        this.isUploading = false;\n        this.hasError = false;\n        this.exists = false;\n        this.permissions = null;\n        this.writeMode = null;\n    }\n\n    PymFile.prototype.setState = function(state) {\n        this.state = state;\n        this.stateCaption = FILE_STATE_CAPTIONS[state];\n        this.isActive = (this.state > FILE_STATES.NEW &&\n            this.state < FILE_STATES.UPLOAD_OK);\n        this.isUploading = (this.state === FILE_STATES.UPLOADING);\n        this.hasError = (this.state > FILE_STATES.UPLOAD_CANCELED &&\n            this.state < FILE_STATES.NEW);\n        $log.log('state', state, this.stateCaption, this);\n    };\n\n    PymFile.prototype.setWriteMode = function(writeMode) {\n        this.writeMode = writeMode;\n        this.setState(FILE_STATES.CAN_UPLOAD);\n    };\n\n    PymFile.prototype.setExistsAndPermissions = function(exists, permissions) {\n        this.exists = exists;\n        this.permissions = permissions;\n        if (!exists && permissions.create) {\n            this.setWriteMode('create');\n            this.setState(FILE_STATES.CAN_UPLOAD);\n        }\n        else {\n            this.setState(FILE_STATES.VALIDATION_OK);\n        }\n    };\n\n    PymFile.prototype.abort = function () {\n        if (this.uploadPromise) { this.uploadPromise.abort(); }\n        this.setState(FILE_STATES.UPLOAD_CANCELED);\n    };\n\n\n    var UploaderService = {\n\n        createPymFile: function (file) {\n            return new PymFile(file);\n        },\n\n        /**\n         * Performs upload of a file and returns promise.\n         *\n         * @param {string} pathStr - Path where to save the file\n         * @param {PymFile} file - Instance of a PymFile\n         * @returns {promise}\n         */\n        upload: function (pathStr, file) {\n            var uploadConf = {\n                    url: RC.urls.upload,\n                    file: file.file,\n                    data: {\n                        key: file.key,\n                        size: file.file.size,\n                        path: pathStr,\n                        write_mode: file.writeMode\n                    }\n\n                    /*\n                     method: 'POST', // 'POST' or 'PUT', default POST\n\n                     headers: {}, // {'Authorization': 'xxx'} only for html5\n\n                     fileName: null, //'doc.jpg' or ['1.jpg', '2.jpg', ...],  to modify the name of the file(s)\n\n                     // file formData name ('Content-Disposition'), server side request form name could be\n                     // an array  of names for multiple files (html5). Default is 'file'\n                     fileFormDataName: 'file', // 'myFile' or ['file[0]', 'file[1]', ...],\n\n                     // map of extra form data fields to send along with file. each field will be sent as a form field.\n                     // The values are converted to json string or jsob blob depending on 'sendObjectsAsJsonBlob' option.\n                     fields: null, // {key: $scope.myValue, ...},\n\n                     // if the value of a form field is an object it will be sent as 'application/json' blob\n                     // rather than json string, default false.\n                     sendObjectsAsJsonBlob: false, // true|false,\n\n                     // customize how data is added to the formData. See #40#issuecomment-28612000 for sample code.\n                     formDataAppender: function(formData, key, val){},\n\n                     // data will be sent as a separate form data field called \"data\". It will be converted to json string\n                     // or jsob blob depending on 'sendObjectsAsJsonBlob' option\n                     data: {},\n\n                     withCredentials: false, //true|false,\n\n                     // ... and all other angular $http() options could be used here.\n                     */\n                },\n                p;\n\n            p = $upload.upload(uploadConf)\n            .success(function (data, status, headers, config) {\n                                        $log.log('succ upl', data);\n                if (data.ok) {\n                    if (data.data[file.key].ok) {\n                        file.setState(FILE_STATES.UPLOAD_OK);\n                    }\n                    else {\n                        file.setState(FILE_STATES.UPLOAD_ERROR);\n                        file.validationMessage = data.data[file.key].validation_msg;\n                    }\n                }\n                else {\n                    if (file.state === FILE_STATES.UPLOADING) {\n                        file.setState(FILE_STATES.UPLOAD_ERROR);\n                        file.validationMessage = 'Unknown error';\n                    }\n                }\n                pym.growler.growlAjaxResp(data, false);\n            })\n            .error(function (data, status, headers, config) {\n                file.setState(FILE_STATES.UPLOAD_ERROR);\n                file.validationMessage = status;\n            });\n            file.uploadPromise = p;\n            file.setState(FILE_STATES.UPLOADING);\n            return p;\n\n            /* then promise (note that returned promise doesn't have progress, xhr and cancel functions. */\n            // var promise = upload.then(success, error, progress);\n\n            /* cancel/abort the upload in progress. */\n            //upload.abort();\n\n            /* alternative way of uploading, send the file binary with the file's content-type.\n             Could be used to upload files to CouchDB, imgur, etc... html5 FileReader is needed.\n             It could also be used to monitor the progress of a normal http post/put request.\n             Note that the whole file will be loaded in browser first so large files could crash the browser.\n             You should verify the file size before uploading with $upload.http().\n             */\n            //$upload.http({...})  // See 88#issuecomment-31366487 for sample code.\n        },\n\n        /**\n         * Validates fileList on server side.\n         *\n         * Put each file with state VALIDATING in one request. Response data must\n         * be a hash: key is file's key, value is 'ok' or validation message.\n         * Communication with server is a POST request, on success we set the state\n         * of each file as responded. On error, we set state to UPLOAD_ERROR.\n         *\n         * @param {string} pathStr - Path as list of nodes.\n         * @param {list} fileList - List of instances of PymFile.\n         * @returns {promise}\n         */\n        validateFiles: function (pathStr, fileList) {\n            var httpConfig = {}, postData = {},\n                ff = [];\n            $log.log('fileList to validate', fileList);\n            angular.forEach(\n                fileList, function (v) {\n                    if (v.state === FILE_STATES.VALIDATING) {\n                        ff.push(\n                            {\n                                key: v.key,\n                                filename: v.file.name,\n                                size: v.file.size,\n                                mime_type: v.file.type\n                            }\n                        );\n                    }\n                }\n            );\n            postData.path = pathStr;\n            postData.files = ff;\n            return $http.post(RC.urls.validate_files, postData, httpConfig)\n                .then(\n                function (resp) {\n                    if (resp.data.ok) {\n                        angular.forEach(\n                            resp.data.data, function (v, k) {\n                                if (v.ok) {\n                                    fileList[k].setExistsAndPermissions(v.exists, v.permissions);\n                                }\n                                else {\n                                    fileList[k].setState(FILE_STATES.VALIDATION_ERROR);\n                                    fileList[k].validationMessage = v.validation_msg;\n                                }\n                            }\n                        );\n                    }\n                    else {\n                        pym.growler.growlAjaxResp(resp.data);\n                        angular.forEach(\n                            fileList, function (v, k) {\n                                if (v.state === FILE_STATES.VALIDATING) {\n                                    fileList[k].setState(FILE_STATES.VALIDATION_ERROR);\n                                    fileList[k].validationMessage = 'Unknown error';\n                                }\n                            }\n                        );\n                    }\n                    return resp;\n                }, function (result) {\n                    angular.forEach(\n                        fileList, function (v, k) {\n                            if (v.state === FILE_STATES.VALIDATING) {\n                                fileList[k].setState(FILE_STATES.VALIDATION_ERROR);\n                                fileList[k].validationMessage = 'Network error';\n                            }\n                        }\n                    );\n                    return result;\n                }\n            );\n        }\n    };\n    return UploaderService;\n}]);\n"],"sourceRoot":"/source/"}