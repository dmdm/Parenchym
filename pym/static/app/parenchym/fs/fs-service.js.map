{"version":3,"sources":["parenchym/fs/fs-service.js"],"names":[],"mappings":"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","file":"parenchym/fs/fs-service.js","sourcesContent":["angular.module('pym.fs').factory('pymFsService',\n        ['$log', '$http', '$q', '$window', 'RC', 'pymService',\nfunction ($log,   $http,   $q,   $window,   RC,   pym) {\n\n    \"use strict\";\n\n    var FsService = {\n        tree: null,\n        browser: null,\n\n        rootPathStr: '',\n        path: [],\n        prevPath: [],\n\n        globalOptions: {\n            includeDeleted: false,\n            searchArea: 'here',\n            searchFields: 'name',\n            search: ''\n        },\n\n        onUploadFinished: null,\n\n        lastSearch: {\n            path: null,\n            incdel: null,\n            sarea: null,\n            sfields: null,\n            s: null\n        },\n        lastSearchResult: null,\n\n        find: function () {\n            if (this.globalOptions.search.length) {\n                this.tree.setPathById(-1000);\n            }\n        },\n\n        refresh: function () {\n            this.tree.refresh();\n            this.browser.refresh();\n        },\n\n        getPath: function () {\n            return this.path;\n        },\n\n        getPathStr: function () {\n            return this.pathToStr(this.path);\n        },\n\n        setPath: function (path) {\n            if (this.path[this.path.length - 1].id > 0) {\n                this.prevPath = this.path;\n            }\n            this.path = path;\n            this.tree.setPath(path);\n            this.browser.setPath(path);\n        },\n\n        getLeafNode: function () {\n            return this.path[this.path.length-1];\n        },\n\n        /**\n         * Toggles flag includeDeleted and changes path intelligently.\n         *\n         * If user currently is in a deleted node and decides to not\n         * display deleted items anymore, returns to the first not-deleted\n         * ancestor.\n         *\n         * Also reloads tree and browser!\n         */\n        toggleIncludeDeleted: function () {\n            var pp = this.path, p0 = pp[0];\n            //this.globalOptions.includeDeleted = !this.globalOptions.includeDeleted;\n            if (this.getLeafNode().is_deleted && !this.globalOptions.includeDeleted) {\n                while (pp.length && pp[pp.length-1].is_deleted) {\n                    pp.pop();\n                }\n                // Make sure, we at least stay on the root node\n                if (! pp.length) { pp.push(p0); }\n                this.setPath(pp);\n            }\n            else {\n                this.tree.refresh();\n                this.browser.refresh();\n            }\n        },\n\n        /**\n         * Initialises Fs by a path string.\n         *\n         * 1. The page controller calls us with the path string.\n         * 2a. We call the browser to load the items of the root path.\n         * 2b. Concurrently we call the tree, which loads the initial node tree\n         *     and sets up the path as a list of nodes.\n         * 3. When the tree has loaded and its path is set up, we grab the path\n         *    from there for ourselves and also provide the browser with it.\n         *\n         * @param {string} pathStr - Root path of tree as string.\n         */\n        firstLoad: function (pathStr) {\n            var self = this;\n            this.rootPathStr = pathStr;\n            $log.log('firstLoad', this.pathToStr(this.path),  this.rootPathStr);\n            this.browser.loadItems();\n            this.tree.initNodes()\n            .then(function (resp) {\n                self.path = self.tree.path;\n                self.browser.path = self.path;\n            });\n        },\n\n        extractMeta: function (nameList) {\n            var httpConfig = {},\n                postData = {\n                    names: nameList,\n                    path: this.pathToStr(this.path)\n                };\n            return $http.put(RC.urls.extract_meta, postData, httpConfig)\n                .then(\n                function (resp) {\n                    if (resp.data.ok) {\n                        // Noop\n                    }\n                    pym.growler.growlAjaxResp(resp.data);\n                    return resp;\n                }, function (result) {\n                    return result;\n                }\n            );\n        },\n\n        createDirectory: function (dirName) {\n            var httpConfig = {},\n                postData = {\n                    name: dirName,\n                    path: this.pathToStr(this.path)\n                };\n            return $http.post(RC.urls.create_directory, postData, httpConfig)\n                .then(\n                function (resp) {\n                    if (resp.data.ok) {\n                        // Noop\n                    }\n                    pym.growler.growlAjaxResp(resp.data);\n                    return resp;\n                }, function (result) {\n                    return result;\n                }\n            );\n        },\n\n        deleteItems: function (names, reason) {\n            var httpConfig = {\n                params: {\n                    path: this.pathToStr(this.path),\n                    names: names,\n                    reason: reason\n                }\n            };\n            return $http.delete(RC.urls.delete_items, httpConfig)\n                .then(\n                function (resp) {\n                    if (resp.data.ok) {\n                        // NOOP\n                    }\n                    pym.growler.growlAjaxResp(resp.data);\n                    return resp;\n                }, function (result) {\n                    return result;\n                }\n            );\n        },\n\n        undeleteItems: function (names) {\n            var httpConfig = {},\n                putData = {\n                    path: this.pathToStr(this.path),\n                    names: names\n                };\n            return $http.put(RC.urls.undelete_items, putData, httpConfig)\n                .then(\n                function (resp) {\n                    if (resp.data.ok) {\n                        // NOOP\n                    }\n                    pym.growler.growlAjaxResp(resp.data);\n                    return resp;\n                }, function (result) {\n                    return result;\n                }\n            );\n        },\n\n        loadItems: function () {\n            var self = this,\n                httpConfig = {params: {}},\n                action = 'load',\n                leafNode = this.getLeafNode();\n\n            // The current leaf node tell us which data to load.\n            // Handle virtual node\n            if (leafNode && leafNode.id <= 0) {\n                // Handle search or search results\n                if (leafNode.name === 'search') {\n                    var searchParams,\n                        s = this.globalOptions.search\n                            .replace(/^\\s+/, '')\n                            .replace(/\\s+$/, ''),\n                        path = this.pathToStr(this.path) || this.rootPathStr;\n                    action = 'search';\n                    // Assemble search command\n                    searchParams = {\n                        path: s.length ? path : self.prevPath,\n                        incdel: this.globalOptions.includeDeleted,\n                        sarea: this.globalOptions.searchArea,\n                        sfields: this.globalOptions.searchFields,\n                        s: s\n                    };\n                    // If this command equals the last one, just return our\n                    // buffered result.\n                    if (angular.equals(searchParams, self.lastSearch)) {\n                        var data = {\n                                ok: true,\n                                data: {\n                                    rows: self.lastSearchResult\n                                }\n                            },\n                            dfr = $q.defer();\n                        dfr.resolve(data);\n                        return dfr.promise;\n                    }\n                    // Nope, this is a fresh search:\n                    else {\n                        httpConfig.params = searchParams;\n                    }\n                }\n                else {\n                    throw new Error('Unknown virtual node: ' + leafNode.id);\n                }\n            }\n            // Handle regular node / path\n            else {\n                httpConfig.params = {\n                    path: this.pathToStr(this.path) || this.rootPathStr,\n                    incdel: this.globalOptions.includeDeleted,\n                    sarea: this.globalOptions.searchArea,\n                    sfields: this.globalOptions.searchFields,\n                    s: ''\n                };\n            }\n            return $http.get(RC.urls.load_items, httpConfig)\n                .then(\n                function (resp) {\n                    // Search results may have both, valid rows and error/warning\n                    // messages. So look for rows and not just for the ok flag.\n                    if (resp.data.data.rows) {\n                        // Process search results\n                        if (action === 'search') {\n                            // Put them into our buffer\n                            self.lastSearchResult = resp.data.data.rows;\n                        }\n                        // action === 'load' needs no special processing\n                    }\n                    if (! resp.data.ok) {\n                        pym.growler.growlAjaxResp(resp.data);\n                    }\n                    return resp;\n                }, function (result) {\n                    return result;\n                }\n            );\n        },\n\n        loadTree: function (filter) {\n            var httpConfig = {\n                params: {\n                    path: this.rootPathStr,\n                    filter: filter,\n                    incdel: this.globalOptions.includeDeleted\n                }\n            };\n            return $http.get(RC.urls.load_tree, httpConfig)\n                .then(\n                function (resp) {\n                    if (resp.data.ok) {\n                        // noop\n                    }\n                    else {\n                        pym.growler.growlAjaxResp(resp.data);\n                    }\n                    return resp;\n                },\n                function (result) {\n                    return result;\n                }\n            );\n        },\n\n        loadFsProperties: function () {\n            var httpConfig = {params: {}};\n            return $http.get(RC.urls.load_fs_properties, httpConfig)\n                .then(\n                function (resp) {\n                    if (resp.data.ok) {\n                        return resp;\n                    }\n                    else {\n                        pym.growler.growlAjaxResp(resp.data);\n                        return false;\n                    }\n                },\n                function (result) {\n                    return result;\n                }\n            );\n        },\n\n        loadItemProperties: function (name) {\n            var httpConfig = {\n                params: {\n                    path: this.pathToStr(this.path),\n                    name: name\n                }\n            };\n            return $http.get(RC.urls.load_item_properties, httpConfig)\n                .then(\n                function (resp) {\n                    if (resp.data.ok) {\n                        return resp;\n                    }\n                    else {\n                        pym.growler.growlAjaxResp(resp.data);\n                        return false;\n                    }\n                },\n                function (result) {\n                    return result;\n                }\n            );\n        },\n\n        changeItemAttr: function (itemId, attr, newValue, oldValue) {\n            var httpConfig = {},\n                putData = {\n                    id: itemId,\n                    attr: attr,\n                    nv: newValue,\n                    ov: oldValue\n                };\n            // Caller need not to differentiate between invalid data and network\n            // errors: Return a rejected promise in both cases.\n            return $http.put(RC.urls.edit_item, putData, httpConfig)\n            .then(\n                function (resp) {\n                    pym.growler.growlAjaxResp(resp.data);\n                    return resp.data.ok ? resp : $q.reject(resp);\n                },\n                function (result) {\n                    return $q.reject(result);\n                }\n            );\n        },\n\n        buildDownloadUrl: function (nameOrEntity) {\n            var pp, s, name, entity, uu, loc;\n            if (angular.isString(nameOrEntity)) {\n                name = nameOrEntity;\n                // Make local copy of original path\n                pp = this.path.slice();\n                // Remove filesystem root, because browser is already there:\n                // http://HOST:PORT/TENANT/fs/@@_br_\n                if (pp[0].name === 'fs') { pp.shift(); }\n                // Stringify path and append name\n                s = pp.length ? this.pathToStr(pp) + '/' + name : name;\n                // Get current url and apply our path string\n                return $window.location.href.replace(/@@_br_/, s);\n            }\n            else {\n                entity = nameOrEntity;\n                // Get current path from browser and keep only the first 2\n                // elements: 0=EMPTY, 1=TENANT. This will discard the 3rd node\n                // (\"fs\") too, because entity.location starts with \"fs\".\n                uu = $window.location.pathname.split('/').slice(0, 2).join('/');\n                // From location remove leading /\n                s = $window.location.origin + uu + '/'\n                    + entity.location + '/' + entity._name;\n                return s;\n            }\n\n        },\n\n        pathToStr: function (path) {\n            if (! (angular.isArray(path) && path.length > 0)) { return null; }\n            var pp = [];\n            angular.forEach(\n                path, function (x) {\n                    pp.push(x.name);\n                }\n            );\n            return pp.join('/');\n        }\n    };\n\n    return FsService;\n}]);"],"sourceRoot":"/source/"}