{"version":3,"sources":["parenchym/RecursionHelper.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;;AAGX,IAAI,eAAe,YAAY,EAAE,SAAS,iBAAiB,QAAQ,OAAO,EAAE,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,EAAE,IAAI,aAAa,MAAM,IAAI,WAAW,aAAa,WAAW,cAAc,OAAO,WAAW,eAAe,MAAM,IAAI,WAAW,YAAY,WAAW,WAAW,MAAM,OAAO,eAAe,QAAQ,WAAW,KAAK,iBAAiB,OAAO,UAAU,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,iBAAiB,YAAY,WAAW,aAAa,IAAI,aAAa,iBAAiB,aAAa,cAAc,OAAO;;;;;AAKhiB,IAAI,WAAW,QAAQ;;AAEvB,IAAI,YAAY,uBAAuB;;AAEvC,SAAS,uBAAuB,KAAK,EAAE,OAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS;;AAEvF,SAAS,gBAAgB,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;AAEhH,IAZM,kBAAA,YAAA;IACF,SADE,gBACU,UAAU;QAalB,gBAAgB,MAdlB;;QAEE,KAAK,WAAW;;;IAiBpB,aAnBE,iBAAA,CAAA;QAoBE,KAAK;QACL,OAAO,SAAS,QAhBZ,SAAS,MAAM;;YAEnB,IAAI,UAAA,QAAQ,WAAW,OAAO;gBAC1B,OAAO,EAAC,MAAM;;;;YAHC,IAOf,WAAW,QAAQ,WAAW;YAClC,IAAI,mBAAA;YACJ,IAAI,OAAO;YACX,OAAO;gBACH,KAAK,QAAS,KAAK,MAAO,KAAK,MAAM;;;;gBAIrC,MAAM,SAAA,KAAU,OAAO,SAAS;;oBAE5B,IAAI,CAAC,kBAAkB;wBACnB,mBAAmB,KAAK,SAAS;;;oBAHT,iBAOxB,OAAO,UAAU,OAAO;wBACpB,QAAQ,OAAO;;;;oBARK,IAaxB,QAAQ,KAAK,MAAM;wBACnB,KAAK,KAAK,MAAM,MAAM;;;;;QAmBlC,CAAC;QACD,KAAK;QACL,OAAO,SAAS,eAfE,UAAU;YAC5B,OAAO,IAAI,gBAAgB;;;;IAmB/B,OA5DE;;;AA6CN,gBAAgB,eAAe,UAAU,CAAC;;AAoB1C,QAAQ,UAlBO,gBAAA","file":"parenchym/RecursionHelper.js","sourcesContent":["/**\n * Source:\n * http://stackoverflow.com/questions/14430655/recursion-in-angular-directives\n */\n\nimport angular from 'angular';\n\nclass RecursionHelper {\n    constructor($compile) {\n        this.$compile = $compile;\n    }\n\n    compile(element, link) {\n        // Normalize the link parameter\n        if (angular.isFunction(link)) {\n            link = {post: link};\n        }\n\n        // Break the recursion loop by removing the contents\n        let contents = element.contents().remove();\n        let compiledContents;\n        let self = this;\n        return {\n            pre: (link && link.pre) ? link.pre : null,\n            /**\n             * Compiles and re-adds the contents\n             */\n            post: function (scope, element) {\n                // Compile the contents\n                if (!compiledContents) {\n                    compiledContents = self.$compile(contents);\n                }\n                // Re-add the compiled contents to the element\n                compiledContents(\n                    scope, function (clone) {\n                        element.append(clone);\n                    }\n                );\n\n                // Call the post-linking function, if any\n                if (link && link.post) {\n                    link.post.apply(null, arguments);\n                }\n            }\n        };\n    }\n\n    static serviceFactory($compile) {\n        return new RecursionHelper($compile);\n    }\n}\n\nRecursionHelper.serviceFactory.$inject = ['$compile'];\n\nexport default RecursionHelper;\n"],"sourceRoot":"/source/"}