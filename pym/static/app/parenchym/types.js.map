{"version":3,"sources":["parenchym/types.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;AAEX,QAAQ,aAAa,QAAQ,SAAS,QAAQ,SAAS,QAAQ,SAAS,QAAQ,UAAU,QAAQ,QAAQ;;AAE1G,IAAI,SAAS,QAAQ;;AAJrB,SAAS,MAAM,GAAG;IACd,IAAI,IAAI,SAAS,GAAG;IACpB,IAAI,MAAM,IAAI;QACV,MAAM,IAAI,UAAU;;IAExB,OAAO;;;AAIX,SAAS,QAAQ,GAAG;IAChB,IAAI,IAAI,WAAW;IACnB,IAAI,MAAM,IAAI;QACV,MAAM,IAAI,UAAU;;IAExB,OAAO;;;AAIX,SAAS,OAAO,GAAG;IACf,IAAI,QAAQ,CAAC,OAAO,GAAG,KAAK,SAAS,KAAK;IAC1C,IAAI,QAAQ,CAAC,MAAM,GAAG,KAAK,QAAQ,KAAK;IACxC,IAAI,OAAO,MAAM,UAAU;QACvB,IAAI,EAAE;;IAMV,IAAI,4BAA4B;IAChC,IAAI,oBAAoB;IACxB,IAAI,iBAAiB;;IAErB,IAAI;QARJ,KAAA,IAAA,YAAc,MAAA,OAAA,aAAA,OAAd,EAAA,4BAAA,CAAA,QAAA,UAAA,QAAA,OAAA,4BAAA,MAAqB;YAUb,IAVC,IAAA,MAAA;;YACL,IAAI,MAAM,GAAG;gBAAE,OAAO;;;MAexB,OAAO,KAAK;QACV,oBAAoB;QACpB,iBAAiB;cACX;QACN,IAAI;YACA,IAAI,CAAC,6BAA6B,UAAU,QAAQ;gBAChD,UAAU;;kBAER;YACN,IAAI,mBAAmB;gBACnB,MAAM;;;;;IAKlB,IAAI,6BAA6B;IACjC,IAAI,qBAAqB;IACzB,IAAI,kBAAkB;;IAEtB,IAAI;QAhCJ,KAAA,IAAA,aAAc,MAAA,OAAA,aAAA,QAAd,EAAA,6BAAA,CAAA,SAAA,WAAA,QAAA,OAAA,6BAAA,MAAqB;YAkCb,IAlCC,IAAA,OAAA;;YACL,IAAI,MAAM,GAAG;gBAAE,OAAO;;;MAuCxB,OAAO,KAAK;QACV,qBAAqB;QACrB,kBAAkB;cACZ;QACN,IAAI;YACA,IAAI,CAAC,8BAA8B,WAAW,QAAQ;gBAClD,WAAW;;kBAET;YACN,IAAI,oBAAoB;gBACpB,MAAM;;;;;IA/ClB,MAAM,IAAI,UAAU;;;AAIxB,SAAS,OAAO,GAAG;;IAEf,IAAI,CAAC,OAAA,YAAY,KAAK,IAAI;QACtB,MAAM,IAAI,UAAU;;IAExB,IAAI,IAAI,IAAI,KAAK;IACjB,IAAI,MAAM,EAAE,YAAY;QACpB,MAAM,IAAI,UAAU;;IAExB,OAAO;;;AAIX,SAAS,OAAO,GAAG;;IAEf,IAAI,CAAC,OAAA,QAAQ,KAAK,IAAI;QAClB,MAAM,IAAI,UAAU;;IAExB,IAAI,IAAI,IAAI,KAAK,gBAAgB;IACjC,IAAI,MAAM,EAAE,YAAY;QACpB,MAAM,IAAI,UAAU;;IAExB,OAAO;;;AAIX,SAAS,WAAW,GAAG;;IAEnB,IAAI,CAAC,OAAA,iBAAiB,KAAK,IAAI;QAC3B,MAAM,IAAI,UAAU;;IAExB,IAAI,IAAI,IAAI,KAAK,EAAE,QAAQ,KAAK;IAChC,IAAI,MAAM,EAAE,cAAc,MAAM,EAAE,YAAY;QAC1C,MAAM,IAAI,UAAU;;IAExB,OAAO;;;AAoDX,QAhDS,QAAA;AAiDT,QAjDgB,UAAA;AAkDhB,QAlDyB,SAAA;AAmDzB,QAnDiC,SAAA;AAoDjC,QApDyC,SAAA;AAqDzC,QArDiD,aAAA,WAAA","file":"parenchym/types.js","sourcesContent":["import { RE_ISO_DATE, RE_TIME, RE_ISO_DATE_TIME } from './const';\n\n\nfunction toInt(s) {\n    let r = parseInt(s, 10);\n    if (isNaN(r)) {\n        throw new TypeError('Value must be an integer number.');\n    }\n    return r;\n}\n\n\nfunction toFloat(s) {\n    let r = parseFloat(s);\n    if (isNaN(r)) {\n        throw new TypeError('Value must be a floating point number.');\n    }\n    return r;\n}\n\n\nfunction toBool(s) {\n    let falsy = [false, 0, '0', 'false', 'f', 'off'];\n    let trusy = [true, 1, '1', 'true', 't', 'on'];\n    if (typeof s === 'string') {\n        s = s.toLowerCase();\n    }\n    for (let x of falsy) {\n        if (s === x) { return false; }\n    }\n    for (let x of trusy) {\n        if (s === x) { return true; }\n    }\n    throw new TypeError('Value must be a boolean (true, \"t\", \"true\", \"on\", \"1\", 1, false, \"f\", \"false\", \"off\", \"0\", 0).');\n}\n\n\nfunction toDate(s) {\n    // Assume value is YYYY-MM-DD\n    if (!RE_ISO_DATE.test(s)) {\n        throw new TypeError('Value must be a date like YYYY-MM-DD');\n    }\n    let x = new Date(s);\n    if (isNaN(x.getDate())) {\n        throw new TypeError('Value must be a date like YYYY-MM-DD');\n    }\n    return x;\n}\n\n\nfunction toTime(s) {\n    // Assume value is HH:MM[:SS]\n    if (!RE_TIME.test(s)) {\n        throw new TypeError('Value must be a time like HH:MM[:SS]');\n    }\n    let x = new Date('0000-01-01T' + s);\n    if (isNaN(x.getTime())) {\n        throw new TypeError('Value must be a time like HH:MM[:SS]');\n    }\n    return x;\n}\n\n\nfunction toDateTime(s) {\n    // Assume value is \"YYYY-MM-DD HH:MM[:SS]\" --> \"YYYY-MM-DDTHH:MM[:SS]\"\n    if (!RE_ISO_DATE_TIME.test(s)) {\n        throw new TypeError('Value must be a datetime like YYYY-MM-DD HH:MM[:SS]');\n    }\n    let x = new Date(s.replace(' ', 'T'));\n    if (isNaN(x.getDate()) || isNaN(x.getTime())) {\n        throw new TypeError('Value must be a datetime like YYYY-MM-DD HH:MM[:SS]');\n    }\n    return x;\n}\n\n\nexport { toInt, toFloat, toBool, toDate, toTime, toDateTime };\n"],"sourceRoot":"/source/"}