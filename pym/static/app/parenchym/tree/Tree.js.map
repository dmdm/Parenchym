{"version":3,"sources":["parenchym/tree/Tree.js"],"names":[],"mappings":"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","file":"parenchym/tree/Tree.js","sourcesContent":["import angular from 'angular';\nimport { dataToNodes } from './Node';\n\n\nlet DEFAULT_RC = {\n    /**\n     * Options\n     */\n\n    /**\n     * Allow more than one node to be selected.\n     */\n    multiSelect: true,\n    /**\n     * Maximum levels to expand on expandAll()\n     */\n    expansionMaxDepth: 5,\n\n    /**\n     * Callback functions\n     */\n\n    /**\n     * Called by each node the first time the unique node ID is needed.\n     * If omitted, the tree uses an integer sequence.\n     */\n    idGen: undefined,\n\n    /**\n     * Called when a node is about to be expanded.\n     * Return true to allow, false to deny.\n     * Args = (tree, node)\n     * Default: undefined\n     */\n    onExpand: undefined,\n    /**\n     * Called when a node is about to be collapsed.\n     * Return true to allow, false to deny.\n     * Args = (tree, node)\n     * Default: undefined\n     */\n    onCollapse: undefined,\n    /**\n     * Called when a node is about to be selected.\n     * Return true to allow, false to deny.\n     * Args = (tree, node)\n     * Default: undefined\n     */\n    onSelect: undefined,\n    /**\n     * Called when a node is about to be unselected.\n     * Return true to allow, false to deny.\n     * Args = (tree, node)\n     * Default: undefined\n     */\n    onUnselect: undefined,\n    /**\n     * Callback to load child nodes.\n     * Must be a promise. Its response must be the children data.\n     * Args = (tree, node)\n     * Default: undefined\n     */\n    onLoadChildren: undefined,\n    /**\n     * Called when the tree instance is ready.\n     * Args = (tree)\n     * Default: undefined\n     */\n    onTreeReady: undefined,\n\n    /**\n     * Templates\n     */\n    expandButton: '<i class=\"fa fa-fw fa-caret-right\"></i>',\n    mayExpandButton: '<i class=\"fa fa-fw fa-caret-right\"></i>',\n    collapseButton: '<i class=\"fa fa-fw fa-caret-down\"></i>',\n    blankButton: '<i class=\"fa fa-fw\"></i>'\n};\n\n\nclass Tree {\n    constructor (rc, treeData) {\n        this.rc = angular.extend({}, DEFAULT_RC, rc);\n        this.changeTreeData(treeData);\n\n        this._nextNodeId = 1;\n\n        if (this.rc.onTreeReady) {\n            this.rc.onTreeReady(this);\n        }\n    }\n\n    get filterExpr() {\n        return this._filterExpr;\n    }\n\n    get hasNodes() {\n        return this._filteredNodes.length > 0;\n    }\n\n    get nodes() {\n        return this._filteredNodes;\n    }\n\n    get allNodes() {\n        return this._allNodes;\n    }\n\n    idGen(n) {\n        if (this.rc.idGen) {\n            return this.rc.idGen(n);\n        }\n        else {\n            return this._nextNodeId++;\n        }\n    }\n\n    nodeById(id) {\n        id = '' + id;\n        return this._allNodes.get(id);\n    }\n\n    changeTreeData(treeData) {\n        this._nextNodeId = 1;\n        this._allNodes = new Map();\n        this._nodes = dataToNodes(this, treeData);\n        this.selected = new Set();\n        this.expanded = new Set();\n        /**\n         * ng-repeat does not work with Set(). Therefore we convert the set into\n         * list.\n         */\n        this.selectedAsList = [];\n        this.matches = null;\n        this._filteredNodes = [];\n        this._filterExpr = null;\n\n        this.filter();\n    }\n\n    expandAll() {\n        for (let n of this.nodes) {\n            n.expand(true, this.rc.expansionMaxDepth);\n        }\n    }\n\n    collapseAll() {\n        for (let n of this.nodes) {\n            n.collapse(true);\n        }\n    }\n\n    selectAll() {\n        for (let n of this.nodes) {\n            n.select(true);\n        }\n        this.selectedToList();\n    }\n\n    unselectAll() {\n        for (let n of this.nodes) {\n            n.unselect(true);\n        }\n        this.selectedToList();\n    }\n\n    getState() {\n        let _nodesToIdList = nodes => {\n            let a = [];\n            for (let n of nodes) {\n                a.push(n.id);\n            }\n            return a;\n        };\n        return {\n            selected: _nodesToIdList(this.selected),\n            expanded: _nodesToIdList(this.expanded),\n            filterExpr: this._filterExpr\n        };\n    }\n\n    setState(state) {\n        let expanded = state.expanded || [];\n        let selected = state.selected || [];\n        let visitor = (tree, node) => {\n            if (expanded.indexOf(node.id) >= 0) {\n                node.expand();\n            }\n            else {\n                node.collapse();\n            }\n            if (selected.indexOf(node.id) >= 0) {\n                node.select();\n            }\n            else {\n                node.unselect();\n            }\n        };\n        this.walk(visitor);\n        this.filter(state.filterExpr || null);\n    }\n\n    filter(expr) {\n        if (expr === undefined || expr === null || expr === '') {\n            expr = null;\n        }\n        this._filterExpr = expr;\n        if (expr === null) {\n            this.matches = null;\n        }\n        else {\n            if (this.rc.filter) {\n                this.matches = this.rc.filter(this, expr);\n            }\n            else {\n                this.matches = null;\n                let q = new RegExp(expr.toLowerCase());\n                this.matches = new Set();\n                let self = this;\n\n                this.walk((tree, node) => {\n                    if (q.test(node.text.toLowerCase())) {\n                        self.matches.add(node);\n                        while (node.parent) {\n                            node = node.parent;\n                            this.matches.add(node);\n                        }\n                    }\n                });\n            }\n        }\n\n        this._filteredNodes.length = 0;\n        if (this._nodes) {\n            if (this.matches === null) {\n                for (let node of this._nodes) {\n                    this._filteredNodes.push(node);\n                    node.filterChildren();\n                }\n            }\n            else {\n                for (let node of this._nodes) {\n                    if (this.matches.has(node)) {\n                        this._filteredNodes.push(node);\n                    }\n                    node.filterChildren();\n                }\n            }\n        }\n    }\n\n    walk(visitor) {\n        let _loop = nodes => {\n            for (let n of nodes) {\n                visitor(this, n);\n                if (n._children) {\n                    _loop(n._children);\n                }\n            }\n        };\n        _loop(this._nodes);\n    }\n\n    selectedToList() {\n        this.selectedAsList.length = 0;\n        for (let n of this.selected) {\n            this.selectedAsList.push(n);\n        }\n    }\n}\n\n\nexport { Tree };\n"],"sourceRoot":"/source/"}