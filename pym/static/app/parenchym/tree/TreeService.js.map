{"version":3,"sources":["parenchym/tree/TreeService.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;;AAGX,IAAI,eAAe,YAAY,EAAE,SAAS,iBAAiB,QAAQ,OAAO,EAAE,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,EAAE,IAAI,aAAa,MAAM,IAAI,WAAW,aAAa,WAAW,cAAc,OAAO,WAAW,eAAe,MAAM,IAAI,WAAW,YAAY,WAAW,WAAW,MAAM,OAAO,eAAe,QAAQ,WAAW,KAAK,iBAAiB,OAAO,UAAU,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,iBAAiB,YAAY,WAAW,aAAa,IAAI,aAAa,iBAAiB,aAAa,cAAc,OAAO;;AAEhiB,IAAI,QAAQ,QAAQ;;AAEpB,SAAS,gBAAgB,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;;;;;;;;;;AAWhH,IAVM,cAAA,YAAA;IACF,SADE,cACY;QAWV,gBAAgB,MAZlB;;QAEE,KAAK,QAAQ,IAAI;;;IAerB,aAjBE,aAAA,CAAA;QAkBE,KAAK;QACL,OAAO,SAAS,QAdZ,IAAI,IAAI,MAAM;YAClB,IAAI,CAAE,KAAK,MAAM,IAAI,KAAK;gBACtB,KAAK,MAAM,IAAI,IAAI,IAAA,MAAA,KAAS,IAAI;;YAEpC,OAAO,KAAK,MAAM,IAAI;;QAgBtB,CAAC;QACD,KAAK;QACL,OAAO,SAAS,iBAfU;YAgBtB,KAAK,IAAI,OAAO,UAAU,QAhBT,MAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;gBAiBb,IAAI,QAAQ,UAAU;;;YAhB9B,OAAA,KAAA,SAAA,UAAA,KAAA,MAAW,aAAA,CAAA,MAAA,OAAe;;;;IAuB9B,OApCE;;;AAiBN,YAAY,eAAe,UAAU;;AAwBrC,QAAQ,UArBO,YAAA","file":"parenchym/tree/TreeService.js","sourcesContent":["import { Tree } from './Tree';\n\n\n/**\n * TreeService - a simple service to hold instances of trees.\n *\n * These instances, i.e. their data and state, can then be shared between\n * controllers, ui-router states etc.\n *\n * Directive pym-tree creates/fetches instances here.\n */\nclass TreeService {\n    constructor() {\n        this.trees = new Map();\n    }\n\n    getTree(id, rc, data) {\n        if (! this.trees.has(id)) {\n            this.trees.set(id, new Tree(rc, data));\n        }\n        return this.trees.get(id);\n    }\n\n    static serviceFactory(...all) {\n        return new TreeService(...all);\n    }\n}\n\nTreeService.serviceFactory.$inject = [];\n\n\nexport default TreeService;\n"],"sourceRoot":"/source/"}