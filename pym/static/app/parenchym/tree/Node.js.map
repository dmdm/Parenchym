{"version":3,"sources":["parenchym/tree/Node.js"],"names":[],"mappings":"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","file":"parenchym/tree/Node.js","sourcesContent":["import angular from 'angular';\n\n\nfunction dataToNodes(tree, data) {\n    let nn = [];\n    for (let d of data) {\n        let n = new Node(tree, d);\n        nn.push(n);\n        if (d.children) {\n            n.setChildNodes(dataToNodes(tree, d.children));\n        }\n    }\n    return nn;\n}\n\n\nclass Node {\n    constructor (tree, nodeData) {\n        this.tree = tree;\n        this.data = nodeData;\n        this._id = undefined;\n        this._type = undefined;\n        this._children = undefined;\n        this._filteredChildren = [];\n        this._parent = undefined;\n\n        this.expanded = nodeData.expanded ? nodeData.expanded : false;\n        this.selected = nodeData.selected ? nodeData.selected : false;\n\n        this.tree.allNodes.set(this.id, this);\n    }\n\n    /**\n     * Node ID that is unique in the whole tree.\n     * \n     * This node ID may be provided in the data as key '__nodeID__'. If not,\n     * we construct it ourselves by concatenating the node type and the ID from\n     * the data (keys '__type__' and 'id'). If '__nodeType__' is not given,\n     * we consider key 'id' to be the node ID. If both keys are absent, we use\n     * an integer sequence.\n     *\n     * Using key 'id' as the node ID may not what you want, e.g. if the\n     * different levels of the tree come from different database tables. Then\n     * the same 'id' may occur multiple times, on different levels, true, but\n     * angular's 'track by' will still complain verbosely.\n     */\n    get id() {\n        if (this._id === undefined) {\n            // Node ID is provided\n            this._id = this.data.__nodeId__;\n            if (this._id === undefined) {\n                // Not provided, so construct it ourselves\n                this._id = this.tree.idGen(this);\n            }\n            this._id = '' + this._id;\n        }\n        return this._id;\n    }\n\n    get type() {\n        if (this._type === undefined) {\n            this._type = this.data.__type__;\n        }\n        return this._type;\n    }\n\n    get text() {\n        if (angular.isFunction(this.data.text)) {\n            return this.data.text(this.data);\n        }\n        else {\n            return this.data.text;\n        }\n    }\n\n    get hasChildren() {\n        return this._filteredChildren.length > 0;\n    }\n\n    get children() {\n        return this._filteredChildren;\n    }\n\n    get parent() {\n        return this._parent;\n    }\n\n    expand(recursive=false, maxDepth=99999) {\n        let self = this;\n        let _doExpand = function () {\n            if (self.hasChildren) {\n                let allow = self.tree.rc.onExpand\n                    ? self.tree.rc.onExpand(self.tree, self)\n                    : true;\n                if (allow) {\n                    self.expanded = true;\n                    self.tree.expanded.add(self);\n                }\n                if (recursive && maxDepth > 0) {\n                    for (let ch of self.children) {\n                        ch.expand(recursive, maxDepth-1);\n                    }\n                }\n            }\n        };\n\n        if (this.tree.rc.onLoadChildren && ! angular.isArray(this._children)) {\n            this.tree.rc.onLoadChildren(this.tree, this)\n                .then(childrenData => {\n                    this.setChildNodes(dataToNodes(this.tree, childrenData));\n                    _doExpand();\n                });\n        }\n        else {\n            _doExpand();\n        }\n    }\n\n    collapse(recursive=false) {\n        let allow = this.tree.rc.onCollapse\n            ? this.tree.rc.onCollapse(this.tree, this)\n            : true;\n        if (allow) {\n            this.expanded = false;\n            this.tree.expanded.delete(this);\n        }\n        if (recursive && this.hasChildren) {\n            for (let ch of this.children) { ch.collapse(recursive); }\n        }\n    }\n\n    toggle(recursive=false) {\n        if (this.expanded) {\n            this.collapse(recursive);\n        }\n        else {\n            this.expand(recursive);\n        }\n    }\n\n    select(recursive=false) {\n        let allow = this.tree.rc.onSelect\n            ? this.tree.rc.onSelect(this.tree, this)\n            : true;\n        if (allow) {\n            this.selected = true;\n            if (! this.tree.rc.multiSelect) {\n                for (let n of this.tree.selected) {\n                    n.unselect(false);\n                }\n            }\n            this.tree.selected.add(this);\n        }\n        if (recursive && this.hasChildren) {\n            for (let ch of this.children) { ch.select(recursive); }\n        }\n        // If recursive, let caller call tree.selectedToList()\n        if (! recursive) {\n            this.tree.selectedToList();\n        }\n    }\n\n    unselect(recursive=false) {\n        let allow = this.tree.rc.onUnselect\n            ? this.tree.rc.onUnselect(this.tree, this)\n            : true;\n        if (allow) {\n            this.selected = false;\n            this.tree.selected.delete(this);\n        }\n        if (recursive && this.hasChildren) {\n            for (let ch of this.children) { ch.unselect(recursive); }\n        }\n        // If recursive, let caller call tree.selectedToList()\n        if (! recursive) {\n            this.tree.selectedToList();\n        }\n    }\n\n    toggleSelection(recursive=false) {\n        if (this.selected) {\n            this.unselect(recursive);\n        }\n        else {\n            this.select(recursive);\n        }\n    }\n\n    expandCollapseButton() {\n        if (this.expanded) {\n            return this.tree.rc.collapseButton;\n        }\n        if (this.hasChildren === undefined) {\n            return this.tree.rc.mayExpandButton;\n        }\n        if (this.hasChildren) {\n            return this.tree.rc.expandButton;\n        }\n        return this.tree.rc.blankButton;\n    }\n\n    filterChildren() {\n        this._filteredChildren.length = 0;\n        if (this._children) {\n            if (this.tree.matches === null) {\n                for (let node of this._children) {\n                    this._filteredChildren.push(node);\n                    node.filterChildren();\n                }\n            }\n            else {\n                for (let node of this._children) {\n                    if (this.tree.matches.has(node)) {\n                        this._filteredChildren.push(node);\n                    }\n                    node.filterChildren();\n                }\n            }\n        }\n    }\n\n    setChildNodes(children) {\n        this._children = children;\n        for (let ch of children) {\n            ch.setParentNode(this);\n        }\n    }\n\n    setParentNode(n) {\n        this._parent = n;\n    }\n}\n\n\nexport { Node, dataToNodes };\n"],"sourceRoot":"/source/"}