{"version":3,"sources":["parenchym/growler/GrowlerService.js"],"names":[],"mappings":"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","file":"parenchym/growler/GrowlerService.js","sourcesContent":["import angular from 'angular';\n\nclass GrowlerService {\n    constructor(toastr) {\n        this.toastr = toastr;\n    }\n\n    static serviceFactory(toastr) {\n        return new GrowlerService(toastr);\n    }\n\n    info(a, b, c) { this.toastr.info(a, b, c); }\n\n    ok(a, b, c) { this.toastr.success(a, b, c); }\n    success(a, b, c) { this.toastr.success(a, b, c); }\n\n    warning(a, b, c) { this.toastr.warning(a, b, c); }\n    warn(a, b, c) { this.toastr.warning(a, b, c); }\n\n    error(a, b, c) {\n        // Make errors stick\n        c = angular.extend(c || {}, {timeOut: 0});\n        this.toastr.error(a, b, c);\n    }\n\n    /**\n     * Growl response from $http.\n     *\n     * If 'resp' is undefined, we growl a generic message about a network error.\n     *\n     * Usage:\n     *     $http.get('/foo').then(x => bar(x), resp => growler.httpError(resp));\n     *\n     * @param resp\n     */\n    httpError(resp) {\n        if (resp) {\n            this.error(resp.statusText, 'HTTP Error ' + resp.status);\n        }\n        else {\n            this.error('There was a network error. Please try again later.');\n        }\n    }\n\n    ajaxResp(resp) {\n        for (let m of resp.msgs) {\n            this.growl(m);\n        }\n    }\n\n    growl(x) {\n        if (angular.isArray(x)) {\n            for (let m of x) { this.growl(m); }\n        }\n        else if (angular.isObject(x)) {\n            let title = x.title || undefined;\n            let message = x.text;\n            let kind = x.kind || 'info';\n            if (kind[0] === 's') { this.success(message, title); }\n            else if (kind[0] === 'e') { this.error(message, title); }\n            else if (kind[0] === 'w') { this.warning(message, title); }\n            else { this.info(message, title); }\n        }\n        else {\n            this.info(x);\n        }\n    }\n\n    clear(x) {\n        this.toastr.clear(x);\n    }\n\n    growlTest() {\n        this.toastr.info('Some informational blah blah', 'Info');\n        this.toastr.warning('There\\'s a black cat', 'Be careful');\n        this.toastr.error('Your keyboard exploded', 'Boom');\n        this.toastr.success('You did fine', 'Good boy');\n    }\n}\n\nGrowlerService.serviceFactory.$inject = ['toastr'];\n\nexport default GrowlerService;\n"],"sourceRoot":"/source/"}