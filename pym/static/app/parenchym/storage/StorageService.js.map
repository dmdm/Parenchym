{"version":3,"sources":["parenchym/storage/StorageService.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,eAAe,YAAY,EAAE,SAAS,iBAAiB,QAAQ,OAAO,EAAE,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,EAAE,IAAI,aAAa,MAAM,IAAI,WAAW,aAAa,WAAW,cAAc,OAAO,WAAW,eAAe,MAAM,IAAI,WAAW,YAAY,WAAW,WAAW,MAAM,OAAO,eAAe,QAAQ,WAAW,KAAK,iBAAiB,OAAO,UAAU,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,iBAAiB,YAAY,WAAW,aAAa,IAAI,aAAa,iBAAiB,aAAa,cAAc,OAAO;;AAEhiB,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;;AAGX,IAAI,WAAW,QAAQ;;AAEvB,IAAI,YAAY,uBAAuB;;AAEvC,IAAI,cAAc,QAAQ;;AAE1B,SAAS,uBAAuB,KAAK,EAAE,OAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS;;AAEvF,SAAS,gBAAgB,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;AAZhH,IAAM,aAAa;IACf,QAAQ;IACR,KAAK;IACL,SAAS;IACT,MAAM;IACN,YAAY;;;AAiBhB,IAbM,iBAAc,YAAA;IAChB,SADE,eACU,MAAM,SAAS,WAAW,SAAS;QAc3C,gBAAgB,MAflB;;QAEE,KAAK,QAAQ;QACb,KAAK,WAAW;QAChB,KAAK,aAAa;QAClB,KAAK,WAAW;QAChB,KAAK,YAAY,IAAI;;;IAkBzB,aAxBE,gBAAc,CAAA;QAyBZ,KAAK;QACL,OAAO,SAAS,WAjBT,MAAwB;YAkB3B,IAlBS,OAAI,UAAA,UAAA,KAAA,UAAA,OAAA,YAAC,OAAI,UAAA;YAmBlB,IAnBoB,KAAE,UAAA,UAAA,KAAA,UAAA,OAAA,YAAC,KAAE,UAAA;;YAC7B,IAAI,MAAM,UAAA,QAAQ,OAAO,IAAI,YAAY;YACzC,IAAI,OAAO,KAAK,SAAS,SAAS;YAClC,IAAI,MAAM;YACV,IAAI;gBACA,IAAI,CAAE,KAAK,UAAU,IAAI,OAAO;oBAC5B,IAAI,SAAS,kBAAkB,SAAS,kBAAkB;wBACtD,IAAI,SAAS;wBACb,KAAK,UAAU,IAAI,MAAM,IAAA,YA7BpC,WA6BmD,MAAM,KAAK,KAAK;2BAEvD;wBACD,MAAM,IAAI,MAAK,6BAA2B,OAAI;;;cAI1D,OAAO,GAAG;gBACN,KAAK,MAAM,MAAM;gBACjB,KAAK,SAAS,MAAM;;YAExB,OAAO,KAAK,UAAU,IAAI;;QAoB1B,CAAC;QACD,KAAK;QACL,OAAO,SAAS,eAnBE,MAAM,SAAS,WAAW,SAAS;YACrD,OAAO,IAAI,eAAe,MAAM,SAAS,WAAW;;;;IAuBxD,OAvDE;;;AAoCN,eAAe,eAAe,UAAU,CAAC,QAAQ,WAAW,aAAa;;AAwBzE,QAAQ,UAtBO,eAAc","file":"parenchym/storage/StorageService.js","sourcesContent":["import angular from 'angular';\nimport { WebStorage } from './WebStorage';\n\n\nconst DEFAULT_RC = {\n    prefix: 'pym',\n    sep: ':',\n    usePath: true,\n    path: 'NOPATH',\n    serializer: JSON\n};\n\n\nclass StorageService {\n    constructor($log, $window, $location, growler) {\n        this._$log = $log;\n        this._$window = $window;\n        this._$location = $location;\n        this._growler = growler;\n        this._storages = new Map();\n    }\n\n    getStorage(name, type=null, rc={}) {\n        let _rc = angular.extend({}, DEFAULT_RC, rc);\n        _rc.path = this._$window.location.pathname;\n        _rc.uid = 'SOME_UID'; // TODO Inject encrypted real UID of authenticated user\n        try {\n            if (! this._storages.has(name)) {\n                if (type === 'localStorage' || type === 'sessionStorage') {\n                    _rc.useUid = true;\n                    this._storages.set(name, new WebStorage(type, _rc, this._$window));\n                }\n                else {\n                    throw new Error(`Unknown storage type: '${type}'`);\n                }\n            }\n        }\n        catch (e) {\n            this._$log.error(e);\n            this._growler.error(e);\n        }\n        return this._storages.get(name);\n    }\n\n    static serviceFactory($log, $window, $location, growler) {\n        return new StorageService($log, $window, $location, growler);\n    }\n}\n\nStorageService.serviceFactory.$inject = ['$log', '$window', '$location', 'pym.growler.service'];\n\nexport default StorageService;\n"],"sourceRoot":"/source/"}