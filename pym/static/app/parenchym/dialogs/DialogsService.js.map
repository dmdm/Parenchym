{"version":3,"sources":["parenchym/dialogs/DialogsService.js"],"names":[],"mappings":"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","file":"parenchym/dialogs/DialogsService.js","sourcesContent":["import angular from 'angular';\nimport DefaultDialogController from './DefaultDialogController';\n\n\nconst RC_GENERAL_DEFAULT = {\n    animation: true,\n    templateUrl: undefined,\n    size: null,\n    controller: DefaultDialogController,\n    controllerAs: 'vm',\n    bindToController: true,\n    backdrop: 'static',\n    keyboard: true\n};\n\n\n/**\n * Service to create canned dialogs.\n *\n * Each method accepts as first argument a 'data' hash.\n * It may have these keys:\n *\n * - title: (HTML) String for the title\n * - body: (HTML or Promise) Content for the body.\n *         A string is treated as trusted HTML, a promise is resolved and its\n *         resp.data treated as trusted HTML.\n * - bodyUrl: URL to a body template, alternatively to key 'body'.\n * - actionOkCaption: String as caption for OK-button\n * - actionCancelCaption: String as caption for CANCEL-button\n * - onActionOk: Callback for OK button\n * - onActionCancel: Callback for CANCEL button\n *\n * Both callbacks must accept one argument: $uibModalInstance.\n *\n * Above keys are mapped directly as properties of the controller, which is\n * 'vm' in the template.\n *\n * Additionally, the whole 'data' hash is available in the template via 'vm.data',\n * useful to pass more data to the template.\n *\n * Argument 'rc' is a hash with settings for ui-bootstrap $modal.\n * http://angular-ui.github.io/bootstrap/#/modal\n *\n */\nclass DialogsService {\n    constructor($uibModal) {\n        this.$uibModal = $uibModal;\n    }\n\n    alert(data={}, rc={}) {\n        const RC_DEFAULT = {\n            templateUrl: 'pym/dialogs/alert.html',\n            keyboard: false, // forbid ESC key\n            kind: 'alert'\n        };\n        let _rc = angular.extend({}, RC_GENERAL_DEFAULT, RC_DEFAULT, rc);\n        if (! data.title) {\n            data.title = 'Alert';\n        }\n        data.__rc__ = _rc;\n        _rc.resolve = { data: data };\n        return this.$uibModal.open(_rc);\n    }\n\n    info(data={}, rc={}) {\n        const RC_DEFAULT = {\n            templateUrl: 'pym/dialogs/alert.html',\n            kind: 'info'\n        };\n        let _rc = angular.extend({}, RC_GENERAL_DEFAULT, RC_DEFAULT, rc);\n        if (! data.title) {\n            data.title = 'Info';\n        }\n        data.__rc__ = _rc;\n        _rc.resolve = { data: data };\n        return this.$uibModal.open(_rc);\n    }\n\n    confirm(data={}, rc={}) {\n        const RC_DEFAULT = {\n            templateUrl: 'pym/dialogs/confirm.html'\n        };\n        let _rc = angular.extend({}, RC_GENERAL_DEFAULT, RC_DEFAULT, rc);\n        if (! data.title) {\n            data.title = 'Confirm';\n        }\n        data.__rc__ = _rc;\n        _rc.resolve = { data: data };\n        return this.$uibModal.open(_rc);\n    }\n\n    dialog(data={}, rc={}) {\n        const RC_DEFAULT = {\n            templateUrl: 'pym/dialogs/dialog.html'\n        };\n        let _rc = angular.extend({}, RC_GENERAL_DEFAULT, RC_DEFAULT, rc);\n        data.__rc__ = _rc;\n        _rc.resolve = { data: data };\n        return this.$uibModal.open(_rc);\n    }\n\n    static serviceFactory($uibModal) {\n        return new DialogsService($uibModal);\n    }\n}\n\nDialogsService.serviceFactory.$inject = ['$uibModal'];\n\nexport default DialogsService;\nexport { RC_GENERAL_DEFAULT, DialogsService };\n\n"],"sourceRoot":"/source/"}