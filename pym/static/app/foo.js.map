{"version":3,"sources":["foo.js"],"names":[],"mappings":"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","file":"foo.js","sourcesContent":["import angular from 'angular';\n\n\nclass FooController {\n    constructor($timeout, $http, growler, storageService, dialogsService) {\n        let self = this;\n\n        this.$timeout = $timeout;\n        this.$http    = $http;\n        this.growler  = growler;\n        this.dialogs = dialogsService;\n        this.storage = storageService.getStorage('foo', 'localStorage');\n        this.storageKey = 'fooUI';\n        this.state = this.loadState();\n\n        this.tree1        = {\n            rc: {\n                oid: 'FOO'\n            },\n            filterExpr: '3',\n            data: [\n                {\n                    text: 't1-alpha', children: [\n                    {\n                        text: 't1-alpha-1', children: [\n                        {text: 't1-alpha-1-a'},\n                        {text: 't1-alpha-1-b'}\n                    ]\n                    },\n                    {\n                        text: 't1-alpha-2', children: [\n                        {text: 't1-alpha-2-a'},\n                        {text: 't1-alpha-2-b'}\n                    ]\n                    },\n                    {\n                        text: 't1-alpha-3', children: [\n                        {text: 't1-alpha-3-a'},\n                        {text: 't1-alpha-3-b'}\n                    ]\n                    }\n                ]\n                },\n                {\n                    text: 't1-beta', children: [\n                    {\n                        text: 't1-beta-1', children: [\n                        {text: 't1-beta-1-a'},\n                        {text: 't1-beta-1-b'}\n                    ]\n                    },\n                    {\n                        text: 't1-beta-2', children: [\n                        {text: 't1-beta-2-a'},\n                        {text: 't1-beta-2-b'}\n                    ]\n                    },\n                    {\n                        text: 't1-beta-3', children: [\n                        {text: 't1-beta-3-a'},\n                        {text: 't1-beta-3-b'}\n                    ]\n                    }\n                ]\n                }\n            ]\n        };\n        this.tree1.filter = function () {\n            self.tree1.tree.filter(self.tree1.filterExpr);\n        };\n        this.tree1.rc.onTreeReady = function(tree) {\n            if (self.state && self.state.tree1) {\n                tree.setState(self.state.tree1);\n                self.tree1.filterExpr = self.state.tree1.filterExpr;\n            }\n        };\n\n        this.tree2 = {\n            rc: {\n                oid: 'BAR'\n            },\n            data: [\n                {\n                    text: 't2-green', children: [\n                    {\n                        text: 't2-green-1', children: [\n                        {text: 't2-green-1-a'},\n                        {text: 't2-green-1-b'}\n                    ]\n                    },\n                    {\n                        text: 't2-green-2', children: [\n                        {text: 't2-green-2-a'},\n                        {text: 't2-green-2-b'}\n                    ]\n                    },\n                    {\n                        text: 't2-green-3', children: [\n                        {text: 't2-green-3-a'},\n                        {text: 't2-green-3-b'}\n                    ]\n                    }\n                ]\n                },\n                {\n                    text: 't2-blue', children: [\n                    {\n                        text: 't2-blue-1', children: [\n                        {text: 't2-blue-1-a'},\n                        {text: 't2-blue-1-b'}\n                    ]\n                    },\n                    {\n                        text: 't2-blue-2', children: [\n                        {text: 't2-blue-2-a'},\n                        {text: 't2-blue-2-b'}\n                    ]\n                    },\n                    {\n                        text: 't2-blue-3', children: [\n                        {text: 't2-blue-3-a'},\n                        {text: 't2-blue-3-b'}\n                    ]\n                    }\n                ]\n                }\n            ]\n        };\n\n        window.addEventListener(\n            \"beforeunload\", e => {\n                this.saveState();\n                //let confirmationMessage = \"Some message\";\n                //e.returnValue = confirmationMessage;     // Gecko, Trident, Chrome 34+\n                //return confirmationMessage;              // Gecko, WebKit, Chrome <34\n            }\n        );\n\n    }\n\n    loadState() {\n        return this.storage.getObject(this.storageKey);\n    }\n\n    saveState() {\n        let state = {};\n        if (this.tree1.tree) {\n            state.tree1 = this.tree1.tree.getState();\n        }\n        this.storage.setObject(this.storageKey, state);\n    }\n\n    growl() {\n        this.growler.growlTest();\n        this.$http.get('/foo').then(\n            x => window.alert(x),\n            y => this.growler.httpError(y)\n        );\n    }\n\n    alert() {\n        this.dialogs.alert().result.then(\n            result => this.alertResult = 'OK: ' + result,\n            result => this.alertResult = 'CANCEL: ' + result\n        );\n    }\n\n    info() {\n        this.dialogs.info().result.then(\n            result => this.infoResult = 'OK: ' + result,\n            result => this.infoResult = 'CANCEL: ' + result\n        );\n    }\n\n    confirm() {\n        this.dialogs.confirm().result.then(\n            result => this.confirmResult = 'OK: ' + result,\n            result => this.confirmResult = 'CANCEL: ' + result\n        );\n    }\n\n    dialog() {\n        let data = {\n            title: `<i class=\"fa fa-puzzle-piece text-info\"></i>Some <span style=\"color:red;\">fancy</span> title`,\n            body: `\n            <p>The title's icon is automatically styled.</p>\n            <p>Foo</p>\n            <p>Bar</p>\n        `,\n            actionOkCaption: 'Do baz',\n            actionCancelCaption: 'Do not do baz'\n        };\n        this.dialogs.dialog(data).result.then(\n            result => this.dialogResult = 'OK: ' + result,\n            result => this.dialogResult = 'CANCEL: ' + result\n        );\n    }\n}\n\nFooController.$inject = ['$timeout', '$http', 'pym.growler.service', 'pym.storage.service', 'pym.dialogs.service'];\n\nexport { FooController };\n"],"sourceRoot":"/source/"}