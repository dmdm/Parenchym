{"version":3,"sources":["app/AppService.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,eAAe,YAAY,EAAE,SAAS,iBAAiB,QAAQ,OAAO,EAAE,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,EAAE,IAAI,aAAa,MAAM,IAAI,WAAW,aAAa,WAAW,cAAc,OAAO,WAAW,eAAe,MAAM,IAAI,WAAW,YAAY,WAAW,WAAW,MAAM,OAAO,eAAe,QAAQ,WAAW,KAAK,iBAAiB,OAAO,UAAU,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,iBAAiB,YAAY,WAAW,aAAa,IAAI,aAAa,iBAAiB,aAAa,cAAc,OAAO;;AAEhiB,OAAO,eAAe,SAAS,cAAc;IACzC,OAAO;;;AAGX,IAAI,WAAW,QAAQ;;AAEvB,IAAI,YAAY,uBAAuB;;AAEvC,SAAS,uBAAuB,KAAK,EAAE,OAAO,OAAO,IAAI,aAAa,MAAM,EAAE,SAAS;;AAEvF,SAAS,gBAAgB,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;AAEhH,IAbM,aAAU,YAAA;IACZ,SADE,WACU,MAAM;QAcd,gBAAgB,MAflB;;QAEE,KAAK,OAAO;;QAEZ,KAAK,mBAAmB,CAAC;;;IAkB7B,aAtBE,YAAU,CAAA;QAuBR,KAAK;QACL,OAAO,SAAS,gBAdJ,MAAM;YAClB,IAAI,IAAC;gBAAE,KAAE;;YAET,IAAI,OAAO,KAAK,QAAQ,YAAY;gBAChC,IAAI,KAAK;gBACT,KAAK,KAAK;;;iBAGT;oBACD,IAAI,SAAA,EAAU,GAAG;wBAAE,OAAO,KAAK;;oBAC/B,KAAK,SAAA,KAAY;wBACb,IAAI,IAAI;wBACR,UAAA,QAAQ,QACJ,UAAC,GAAG,GAAC;4BAiBG,OAjBE,EAAE,KAAK;;wBAErB,OAAO;;;YAGf,IAAI,IAAC;YAkBD,IAAI,4BAA4B;YAChC,IAAI,oBAAoB;YACxB,IAAI,iBAAiB;;YAErB,IAAI;gBArBR,KAAA,IAAA,YAAiB,KAAK,iBAAgB,OAAA,aAAA,OAAA,EAAA,4BAAA,CAAA,QAAA,UAAA,QAAA,OAAA,4BAAA,MAAE;oBAuB5B,IAvBH,OAAI,MAAA;;oBACT,IAAI,EAAE;oBACN,IAAI,GAAG;wBACH;;;cA2BF,OAAO,KAAK;gBACV,oBAAoB;gBACpB,iBAAiB;sBACX;gBACN,IAAI;oBACA,IAAI,CAAC,6BAA6B,UAAU,QAAQ;wBAChD,UAAU;;0BAER;oBACN,IAAI,mBAAmB;wBACnB,MAAM;;;;;YAlCtB,IAAI,CAAE,GAAG;gBACL,IAAI,EAAE;;YAEV,IAAI,CAAE,GAAG;gBACL,IAAI,KAAK,KAAK;;YAElB,OAAO;;OAyCR;QACC,KAAK;QACL,KAAK,SAAS,MA7EI;YAAE,OAAO,KAAK;;QAgFhC,KAAK,SAAS,IA/EE,GAAG;YAAE,KAAK,mBAAmB;;QAkF7C,CAAC;QACD,KAAK;QACL,OAAO,SAAS,iBA/CU;YAgDtB,KAAK,IAAI,OAAO,UAAU,QAhDT,MAAG,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,QAAA;gBAAH,IAAG,QAAA,UAAA;;;YACxB,OAAA,KAAA,SAAA,UAAA,KAAA,MAAW,YAAU,CAAA,MAAA,OAAI;;;;IAuD7B,OArGE;;;AAkDN,WAAW,eAAe,UAAU,CAChC;;AAuDJ,QAAQ,UAnDO,WAAU","file":"app/AppService.js","sourcesContent":["import angular from 'angular';\n\n\nclass AppService {\n    constructor($log) {\n        this.$log = $log;\n        \n        this._wantedLanguages = ['*'];\n    }\n\n    get wantedLanguages() { return this._wantedLanguages; }\n    set wantedLanguages(v) { this._wantedLanguages = v; }\n\n    fetchTranslated(msgs) {\n        let g, kk;\n        // msgs is a Map\n        if (typeof msgs.get === 'function') {\n            g = msgs.get;\n            kk = msgs.keys;\n        }\n        // msgs is a POJSO\n        else {\n            g = function (k) { return msgs[k]; };\n            kk = function () {\n                let _ = [];\n                angular.forEach(\n                    (v, k) => _.push(k)\n                );\n                return _;\n            };\n        }\n        let m;\n        for (let lang of this._wantedLanguages) {\n            m = g(lang);\n            if (m) {\n                break;\n            }\n        }\n        if (! m) {\n            m = g('*');\n        }\n        if (! m) {\n            m = msgs[kk()[0]];\n        }\n        return m;\n    }\n\n\n    static serviceFactory(...all) {\n        return new AppService(...all);\n    }\n}\n\nAppService.serviceFactory.$inject = [\n    '$log'\n];\n\n\nexport default AppService;\n"],"sourceRoot":"/source/"}